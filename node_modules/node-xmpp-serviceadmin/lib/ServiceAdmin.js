// Generated by CoffeeScript 1.9.1

/*
This program is distributed under the terms of the MIT license.
Copyright 2012 - 2015 (c) Markus Kohlhase <mail@markus-kohlhase.de>
 */
var CMD_NS, EMAIL, JID, JIDS, NAME, NS, PASS, PASS_VERY, SURNAME, ServiceAdmin, xmpp;

xmpp = require("node-xmpp-core");

NS = "http://jabber.org/protocol/admin";

CMD_NS = "http://jabber.org/protocol/commands";

JID = "accountjid";

JIDS = "accountjids";

EMAIL = "email";

NAME = "given_name";

SURNAME = "surname";

PASS = "password";

PASS_VERY = "password-verify";

ServiceAdmin = (function() {
  function ServiceAdmin(jid1, comp1, service) {
    this.jid = jid1;
    this.comp = comp1;
    this.service = service;
  }

  ServiceAdmin.prototype.runOneStageCmd = function(cmd, fields, next) {
    var cmdIq, comp, handler, id;
    if (next == null) {
      next = function() {};
    }
    id = "exec" + ((new Date).getTime());
    comp = this.comp;
    handler = function(stanza) {
      var c, n, ref, ref1, ref2, ref3, ref4;
      if (stanza.is('iq') && ((ref = stanza.attrs) != null ? ref.id : void 0) === id) {
        if (stanza.attrs.type === 'error') {
          comp.removeListener("stanza", handler);
          return next(new Error("could not execute command"));
        } else if (stanza.attrs.type === 'result') {
          switch ((ref1 = (c = stanza.getChild("command")).attrs) != null ? ref1.status : void 0) {
            case "executing":
              ServiceAdmin.switchAddr(stanza);
              ServiceAdmin.fillForm(stanza, fields);
              return comp.send(stanza);
            case 'completed':
              comp.removeListener("stanza", handler);
              if (((ref2 = (n = c.getChild("note"))) != null ? (ref3 = ref2.attrs) != null ? ref3.type : void 0 : void 0) === "error") {
                return next(new Error((ref4 = n.children) != null ? ref4[0] : void 0));
              } else {
                return next(void 0, c);
              }
          }
        }
      }
    };
    this.comp.on('stanza', handler);
    cmdIq = ServiceAdmin.createCmdIq(this.jid, this.service, id, cmd);
    return this.comp.send(cmdIq);
  };

  ServiceAdmin.createCmdIq = function(from, to, id, cmd) {
    var iq;
    iq = new xmpp.Stanza.Iq({
      type: 'set',
      from: from,
      to: to,
      id: id
    });
    iq.c("command", {
      xmlns: CMD_NS,
      node: NS + "#" + cmd,
      action: 'execute'
    });
    return iq;
  };

  ServiceAdmin.switchAddr = function(stanza) {
    var me;
    me = stanza.attrs.to;
    stanza.attrs.to = stanza.attrs.from;
    return stanza.attrs.from = me;
  };

  ServiceAdmin.fillForm = function(stanza, fields) {
    var c, i, len, ref, results, v, val, x, xF;
    stanza.attrs.type = "set";
    c = stanza.getChild("command");
    delete c.attrs.status;
    x = c.getChild("x");
    x.attrs.type = "submit";
    ref = x.getChildren("field");
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      xF = ref[i];
      if ((val = fields[xF.attrs["var"]]) != null) {
        if (xF.getChild("value") != null) {
          xF.remove("value");
        }
        if (val instanceof Array) {
          results.push((function() {
            var j, len1, results1;
            results1 = [];
            for (j = 0, len1 = val.length; j < len1; j++) {
              v = val[j];
              results1.push(xF.c("value").t(v).up());
            }
            return results1;
          })());
        } else {
          results.push(xF.c("value").t(val.toString()));
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  ServiceAdmin.getJID = function(jid) {
    var i, len, results, x;
    if (jid instanceof Array) {
      results = [];
      for (i = 0, len = jid.length; i < len; i++) {
        x = jid[i];
        results.push(ServiceAdmin.getJID(x));
      }
      return results;
    } else if (jid instanceof xmpp.JID) {
      return jid;
    } else {
      return jid = new xmpp.JID(jid).bare().toString();
    }
  };

  ServiceAdmin.prototype.addUser = function(jid, pw, prop, next) {
    var data;
    if (prop == null) {
      prop = {};
    }
    data = {};
    data[JID] = ServiceAdmin.getJID(jid);
    data[PASS] = pw;
    data[PASS_VERY] = pw;
    if (prop.email) {
      data[EMAIL] = prop.email;
    }
    if (prop.name) {
      data[NAME] = prop.name;
    }
    if (prop.surname) {
      data[SURNAME] = prop.surname;
    }
    return this.runOneStageCmd("add-user", data, next);
  };

  ServiceAdmin.prototype.deleteUser = function(jid, next) {
    var data;
    data = {};
    data[JIDS] = ServiceAdmin.getJID(jid);
    return this.runOneStageCmd("delete-user", data, next);
  };

  ServiceAdmin.prototype.disableUser = function(jid, next) {
    var data;
    data = {};
    data[JIDS] = ServiceAdmin.getJID(jid);
    return this.runOneStageCmd("disable-user", data, next);
  };

  ServiceAdmin.prototype.changeUserPassword = function(jid, pw, next) {
    var data;
    data = {};
    data[JID] = ServiceAdmin.getJID(jid);
    data[PASS] = pw;
    return this.runOneStageCmd("change-user-password", data, next);
  };

  ServiceAdmin.prototype.getUserPassword = function(jid, next) {
    var data;
    data = {};
    data[JID] = ServiceAdmin.getJID(jid);
    return this.runOneStageCmd("get-user-password", data, function(err, c) {
      var ref, ref1;
      if (err) {
        return next(err);
      }
      return next(void 0, (ref = c.getChildByAttr("var", "password", null, true)) != null ? (ref1 = ref.getChild("value")) != null ? ref1.getText() : void 0 : void 0);
    });
  };

  ServiceAdmin.prototype.endUserSession = function(jids, next) {
    var data;
    data = {};
    data[JIDS] = ServiceAdmin.getJID(jids);
    return this.runOneStageCmd("end-user-session", data, next);
  };

  return ServiceAdmin;

})();

module.exports = ServiceAdmin;
